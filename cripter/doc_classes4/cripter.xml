<class name="Cripter" inherits="RefCounted" version="0.1">

	<brief_description>
		Encryption functions for Godot Engine.
	</brief_description>

	<description>
		This module allows you to easily encrypt and decrypt data.
	</description>
   
    <tutorials>
        <link title="Custom drawing in 2D">https://docs.godotengine.org/en/latest/tutorials/2d/custom_drawing_in_2d.html</link>
        <link title="All 2D Demos">https://github.com/godotengine/godot-demo-projects/tree/master/2d</link>
    </tutorials>



    <methods>
   
		<method name="cbc_encrypt">
			<return type="PackedByteArray" />
			<argument index="0" name="Encrypt data" type="PackedByteArray" />
			<argument index="1" name="Password" type="String" />
			<description>
				Encrypt data using CBC algorithm.
				Returns a new [PackedByteArray] with the data encrypted.
			</description>
		</method>
   
		<method name="cbc_decrypt">
			<return type="PackedByteArray" />
			<argument index="0" name="Encrypt data" type="PackedByteArray" />
			<argument index="1" name="Password" type="String" />
			<description>
				Decrypt data using CBC algorithm.
				Returns a new [PackedByteArray] with the data decrypted. The Password used to decrypt the data must be the same as the one used to encrypt.
			</description>
		</method> 
 
 
 		<method name="gcm_encrypt">
			<return type="PackedByteArray" />
			<argument index="0" name="Encrypt data" type="PackedByteArray" />
			<argument index="1" name="Password" type="String" />
			<argument index="2" name="Additional Data" type="String" default="" />
			<description>
				Decrypt data using GCM algorithm.
				Returns a new [PackedByteArray] with the data encrypted. An additional string can be used to encrypt data.
			</description>
		</method> 
 
 
  		<method name="gcm_decrypt">
			<return type="PackedByteArray" />
			<argument index="0" name="Encrypt data" type="PackedByteArray" />
			<argument index="1" name="Password" type="String" />
			<argument index="2" name="Additional Data" type="String" default="" />
			<description>
				Decrypt data using GCM algorithm.
				Returns a new [PackedByteArray] with the data decrypted. The password used to decrypt the data must be the same as the one used to encrypt. An additional string can be used to encrypt data.
			</description>
		</method> 
 


 		<method name="rsa_encrypt">
			<return type="PackedByteArray" />
			<argument index="0" name="Encrypt data" type="PackedByteArray" />
			<argument index="1" name="Public key path" type="String" />
			<description>
				Decrypt data using RSA algorithm.
				Returns a new [PackedByteArray] with the data encrypted. An SSH key pair is required to perform encryption and decryption using this algorithm.
			</description>
		</method> 

 		<method name="rsa_decrypt">
			<return type="PackedByteArray" />
			<argument index="0" name="Encrypt data" type="PackedByteArray" />
			<argument index="1" name="Private key path" type="String" />
			<argument index="2" name="Password" type="String" />
			<description>
				Decrypt data using RSA algorithm.
				Returns a new [PackedByteArray] with the data decrypted. An SSH key pair is required to perform encryption and decryption using this algorithm. If you are using a encrypted private key the password will be required.
			</description>
		</method> 
 
 
 
 		<method name="keys_match_check">
			<return type="PackedByteArray" />
			<argument index="1" name="Private key path" type="String" />
			<argument index="1" name="Public key path" type="String" />
			<description>
				Check if public and private keys are relative to each other.
			</description>
		</method>
 
 
  
    </methods>


</class>


<description> Returns a new [PackedByteArray] with the data decompressed. Set the compression mode using one of [enum File.CompressionMode]'s constants. [b]This method only accepts gzip and deflate compression modes.[/b] This method is potentially slower than [code]decompress[/code], as it may have to re-allocate its output buffer multiple times while decompressing, whereas [code]decompress[/code] knows it's output buffer size from the beginning. GZIP has a maximal compression ratio of 1032:1, meaning it's very possible for a small compressed payload to decompress to a potentially very large output. To guard against this, you may provide a maximum size this function is allowed to allocate in bytes via [code]max_output_size[/code]. Passing -1 will allow for unbounded output. If any positive value is passed, and the decompression exceeds that amount in bytes, then an error will be returned. </description>



				[codeblocks]
				[gdscript]
				var array = PackedByteArray([11, 46, 255])
				print(array.hex_encode()) # Prints: 0b2eff
				[/gdscript]
				[csharp]
				var array = new byte[] {11, 46, 255};
				GD.Print(array.HexEncode()); // Prints: 0b2eff
				[/csharp]
				[/codeblocks]
